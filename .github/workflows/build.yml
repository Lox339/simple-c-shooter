name: Build Simple C Shooter

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  BUILD_TYPE: Release

jobs:
  build-cpp:
    name: Build C/C++ Components
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: simple-shooter-linux
            cmake_generator: "Unix Makefiles"
          - os: windows-latest
            platform: windows
            artifact_name: simple-shooter-windows
            cmake_generator: "Visual Studio 17 2022"
          - os: macos-latest
            platform: macos
            artifact_name: simple-shooter-macos
            cmake_generator: "Unix Makefiles"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
      with:
        cmake-version: '3.20'

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libglfw3-dev \
          libglew-dev \
          libgl1-mesa-dev \
          libopenal-dev \
          libsndfile1-dev \
          pkg-config

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install \
          cmake \
          glfw \
          glew \
          openal-soft \
          libsndfile \
          pkg-config

    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1.3

    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        # Install vcpkg dependencies
        vcpkg install glfw3:x64-windows
        vcpkg install glew:x64-windows
        vcpkg install openal-soft:x64-windows
        vcpkg install libsndfile:x64-windows
        vcpkg integrate install

    - name: Configure CMake
      run: |
        cmake -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -G "${{ matrix.cmake_generator }}" \
          ${{ matrix.os == 'windows-latest' && '-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake' || '' }}

    - name: Build C/C++ Components
      run: |
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel

    - name: Run C/C++ Tests
      if: matrix.os != 'windows-latest'  # Skip tests on Windows for now
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure

    - name: Package artifacts (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p artifacts/${{ matrix.platform }}
        cp build/simple_shooter artifacts/${{ matrix.platform }}/
        cp -r assets artifacts/${{ matrix.platform }}/ || true
        cp -r sounds artifacts/${{ matrix.platform }}/ || true
        cp -r music artifacts/${{ matrix.platform }}/ || true
        cp README.md artifacts/${{ matrix.platform }}/
        tar -czf ${{ matrix.artifact_name }}.tar.gz -C artifacts/${{ matrix.platform }} .

    - name: Package artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir artifacts\${{ matrix.platform }}
        copy build\${{env.BUILD_TYPE}}\simple_shooter.exe artifacts\${{ matrix.platform }}\
        xcopy assets artifacts\${{ matrix.platform }}\assets\ /E /I /Y 2>nul || echo "No assets directory"
        xcopy sounds artifacts\${{ matrix.platform }}\sounds\ /E /I /Y 2>nul || echo "No sounds directory"
        xcopy music artifacts\${{ matrix.platform }}\music\ /E /I /Y 2>nul || echo "No music directory"
        copy README.md artifacts\${{ matrix.platform }}\
        powershell Compress-Archive -Path artifacts\${{ matrix.platform }}\* -DestinationPath ${{ matrix.artifact_name }}.zip

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          ${{ matrix.os == 'windows-latest' && format('{0}.zip', matrix.artifact_name) || format('{0}.tar.gz', matrix.artifact_name) }}
        retention-days: 30

  build-csharp:
    name: Build C# UI Components
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Restore dependencies
      run: dotnet restore src/ui/SimpleShooter.UI.csproj

    - name: Build C# UI
      run: dotnet build src/ui/SimpleShooter.UI.csproj --configuration Release --no-restore

    - name: Run C# Tests
      run: dotnet test src/ui/SimpleShooter.UI.csproj --configuration Release --no-build --verbosity normal

    - name: Publish C# UI
      run: dotnet publish src/ui/SimpleShooter.UI.csproj --configuration Release --output ./publish/${{ matrix.platform }}

    - name: Upload C# artifacts
      uses: actions/upload-artifact@v3
      with:
        name: csharp-ui-${{ matrix.platform }}
        path: ./publish/${{ matrix.platform }}
        retention-days: 30

  integration-test:
    name: Integration Tests
    needs: [build-cpp, build-csharp]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download C++ artifacts
      uses: actions/download-artifact@v3
      with:
        name: simple-shooter-linux
        path: ./cpp-build

    - name: Download C# artifacts
      uses: actions/download-artifact@v3
      with:
        name: csharp-ui-linux
        path: ./csharp-build

    - name: Extract C++ build
      run: |
        cd cpp-build
        tar -xzf simple-shooter-linux.tar.gz

    - name: Run integration tests
      run: |
        chmod +x cpp-build/simple_shooter
        # Run basic smoke test
        timeout 10s ./cpp-build/simple_shooter --test || true
        echo "Integration test completed"

  create-release:
    name: Create Release Package
    needs: [build-cpp, build-csharp, integration-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./all-artifacts

    - name: Create release package
      run: |
        mkdir -p release-package
        
        # Extract and organize all platform builds
        for platform in linux windows macos; do
          mkdir -p release-package/$platform
          
          # C++ components
          if [ "$platform" = "windows" ]; then
            cd all-artifacts/simple-shooter-$platform
            unzip simple-shooter-$platform.zip -d ../../release-package/$platform/
            cd ../..
          else
            cd all-artifacts/simple-shooter-$platform
            tar -xzf simple-shooter-$platform.tar.gz -C ../../release-package/$platform/
            cd ../..
          fi
          
          # C# components
          cp -r all-artifacts/csharp-ui-$platform/* release-package/$platform/
        done
        
        # Create final release archives
        cd release-package
        for platform in linux macos; do
          tar -czf ../simple-shooter-$platform-complete.tar.gz $platform/
        done
        zip -r ../simple-shooter-windows-complete.zip windows/

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          simple-shooter-linux-complete.tar.gz
          simple-shooter-windows-complete.zip
          simple-shooter-macos-complete.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install cppcheck
      run: sudo apt-get install -y cppcheck

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --inconclusive --xml --xml-version=2 \
          src/core/ src/graphics/ src/physics/ src/audio/ \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          2> cppcheck-report.xml || true

    - name: Setup .NET for code analysis
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Analyze C# code
      run: |
        dotnet restore src/ui/SimpleShooter.UI.csproj
        dotnet build src/ui/SimpleShooter.UI.csproj --configuration Release --verbosity normal

    - name: Upload code quality reports
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-reports
        path: |
          cppcheck-report.xml
        retention-days: 30