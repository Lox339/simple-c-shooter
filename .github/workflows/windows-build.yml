name: Windows Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: ${{ github.workspace }}\vcpkg

    steps:
      - name: Checkout repository (with submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Ensure vcpkg present and up-to-date
        shell: pwsh
        run: |
          # If vcpkg submodule wasn't initialized by checkout, clone fallback
          if (-not (Test-Path -Path "./vcpkg" -PathType Container)) {
            Write-Host "vcpkg directory not found — cloning upstream vcpkg into ./vcpkg"
            git clone https://github.com/microsoft/vcpkg.git vcpkg
          } else {
            Write-Host "vcpkg directory exists — updating"
            cd vcpkg
            # Ensure we have tags/branches and latest ports
            git fetch --all --tags
            git reset --hard origin/master || git reset --hard origin/main
            cd ..
          }

          Write-Host "Bootstrapping vcpkg"
          & .\vcpkg\bootstrap-vcpkg.bat

          Write-Host "Integrating vcpkg and updating ports"
          & .\vcpkg\vcpkg.exe integrate install
          # Update portfiles and vcpkg metadata; ignore non-zero if nothing to update
          & .\vcpkg\vcpkg.exe update || Write-Host "vcpkg update returned non-zero (ok to continue)"

      - name: Install dependencies with vcpkg
        shell: pwsh
        run: |
          # If repository uses vcpkg manifest (vcpkg.json) - this will install manifest deps.
          $root = "${{ github.workspace }}"
          if (Test-Path "$root\vcpkg.json") {
            Write-Host "vcpkg.json found -> using manifest install"
            & .\vcpkg\vcpkg.exe install --triplet x64-windows
          } else {
            Write-Host "No vcpkg.json -> installing common dependencies used by project"
            # Adjust the package list below to match your project's needs.
            & .\vcpkg\vcpkg.exe install opengl:x64-windows glfw3:x64-windows glm:x64-windows --recurse
          }

      - name: Configure CMake (uses vcpkg toolchain)
        shell: bash
        run: |
          mkdir -p build
          cmake -S . -B build -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake"

      - name: Build
        shell: bash
        run: |
          cmake --build build --config Release -- -m

      - name: Run unit tests (optional)
        if: always()
        shell: bash
        run: |
          # Adjust this if your tests are invoked differently
          if [ -d build ]; then
            ctest --test-dir build --output-on-failure || true
          else
            echo "No build directory found - skipping tests"
<<<<<<< HEAD
          fi
=======
          fi
>>>>>>> 81dd9081c4f9a6f7ce31cd2bb79e5c6f3a1d0551
